<?php

//@apache_setenv('no-gzip', 1);

class GDownloadHelper {

    public static $stream_types = array(
        'mp3', 'm3u', 'm4a', 'mid', 'ogg', 'ra', 'ram', 'wm',
        'wav', 'wma', 'aac', '3gp', 'avi', 'mov', 'mp4', 'mpeg',
        'mpg', 'swf', 'wmv', 'divx', 'asf');

    /**
     *
     * Download a file with resume, stream and speed options
     *
     * @param string $filename path to file including filename
     * @param integer $speed maximum download speed
     * @param boolean $doStream if stream or not
     */
    public static function download($filepath, $customMime = null, $filename, $maxSpeed = 10, $doStream = false) {
        if (!isset($filename))
            $filename = basename($filepath);
        $seek_start = 0;
        $seek_end = -1;
        $data_section = false;
        $buffsize = 1024; // you can set by multiple of 1024

        if (!file_exists($filepath) && is_file($filepath))
            throw new CException(Yii::t('GDownloadHelper', 'Filepath does not exists on specified location or is not a regular file'));

        $mimeType = CFileHelper::getMimeType($filepath);

        if ($mimeType == null)
            switch (CFileHelper::getExtension($filename)) {
                case "pdf": $mimeType = "application/pdf";
                    break;
                case "exe": $mimeType = "application/octet-stream";
                    break;
                case "zip": $mimeType = "application/zip";
                    break;
                case "doc": $mimeType = "application/msword";
                    break;
                case "xls": $mimeType = "application/vnd.ms-excel";
                    break;
                case "ppt": $mimeType = "application/vnd.ms-powerpoint";
                    break;
                case "gif": $mimeType = "image/gif";
                    break;
                case "png": $mimeType = "image/png";
                    break;
                case "jpeg":
                case "jpg": $mimeType = "image/jpg";
                    break;
                default: $mimeType = "application/force-download";
            }
        //$mimeType = "application/octet-stream";
        if ($customMime != null)
            $mimeType = $customMime;
        $extension = CFileHelper::getExtension($filepath);

        // resuming?
        if (isset($_SERVER['HTTP_RANGE'])) {
            $seek_range = substr($_SERVER['HTTP_RANGE'], strlen('bytes='));

            $range = explode('-', $seek_range);

            // do it the old way, no fancy stuff
            // to avoid problems
            if ($range[0] > 0)
                $seek_start = intval($range[0]);
            if ($range[1] > 0)
                $seek_end = intval($range[1]);

            $data_section = true;
        }
        // do some cleaning before we start
        //ob_end_clean();
        $old_status = ignore_user_abort(true);

        $size = filesize($filepath);

        if ($seek_start > ($size - 1))
            $seek_start = 0;

        // open the file and move pointer
        // to started chunk
        $res = fopen($filepath, 'rb');
        if ($seek_start)
            fseek($res, $seek_start);
        if ($seek_end < $seek_start)
            $seek_end = $size - 1;

        $contentDisposition = 'attachment';
        if ($doStream == true) {
            if (in_array($extension, self::$stream_types)) {
                $contentDisposition = 'inline';
            }
        }
        $headers = array();
        if (!function_exists('getallheaders')) {
            foreach ($_SERVER as $name => $value) {
                /* RFC2616 (HTTP/1.1) defines header fields as case-insensitive entities. */
                if (strtolower(substr($name, 0, 5)) == 'http_') {
                    $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;
                }
            }
        } else {
            $headers = getallheaders();
        }
        //CVarDumper::dump(strtotime($headers['If-Modified-Since']));
        //CVarDumper::dump((strtotime($headers['If-Modified-Since']) >= filectime($filepath)));
        //CVarDumper::dump(strtotime(strtotime($headers['If-Modified-Since']) >= filectime($filepath)));
        //die();
        
        header('Content-Type: ' . $mimeType);
        $offset = 3600 * 24 * 7;
        if (isset($headers['If-Modified-Since']) && (strtotime($headers['If-Modified-Since']) <= filectime($filepath))) {
            // Client's cache IS current, so we just respond '304 Not Modified'.
            header('Cache-Control: max-age=' . $offset);
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s', filemtime($filepath)) . ' GMT', true, 304);
            header("Expires: " . gmdate("D, d M Y H:i:s", time() + $offset) . " GMT");
        } else {
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s', filemtime($filepath)) . ' GMT', true, 200);
            if ($mimeType == 'image/jpeg') {
                header('Cache-Control: max-age=' . $offset);
                header("Expires: " . gmdate("D, d M Y H:i:s", time() + $offset) . " GMT");
                header("Last-Modified: " . gmdate("D, d M Y H:i:s", filectime($filepath)) . " GMT");
                $contentDisposition = 'inline';
            }

            if (strstr($_SERVER['HTTP_USER_AGENT'], "MSIE")) {
                $fileName = preg_replace('/\./', '%2e', $filename, substr_count($filename, '.') - 1);
            }
            header('Content-Disposition: ' . $contentDisposition . '; filename="' . $filename . '"');
            //header('Last-Modified: ' . date('D, d M Y H:i:s \G\M\T', filemtime($filepath)));

            $size = $seek_end - $seek_start + 1;
            // flushing a data section?
            if ($data_section) {
                header("HTTP/1.0 206 Partial Content");
                header("Status: 206 Partial Content");
                header('Accept-Ranges: bytes');
                header("Content-Range: bytes $seek_start-$seek_end/$size");
                header("Content-Length: " . ($seek_end - $seek_start + 1));
            } else {
                header('Content-Length: ' . $size);
                header('Accept-Ranges: bytes');
            }
            $transferred = 0;
            header("Content-Transfer-Encoding: Binary");

            while (!( connection_aborted() || connection_status() == 1) && !feof($res)) {
                print(fread($res, $buffsize));
                $transferred += $buffsize;
                flush();
                @ob_flush();

                if ($transferred > 131072)
                    usleep(7500);
            }
            // close file
            fclose($res);
            // restore defaults
            ignore_user_abort($old_status);
            set_time_limit(ini_get('max_execution_time'));
        }
    }

}